--- 
apiVersion: v1
kind: Template
metadata: 
  annotations: 
    description: "1&1 Laravel Application"
  name: laravel-application
objects: 
# Worker (WORKER)
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata: 
      labels: 
        template: "laravel-application"
        component: "worker"
        app: "${APP_NAME}"
        name: "${APP_NAME}-worker"
      name: "${APP_NAME}-worker"
    spec: 
      replicas: 2
      selector: 
        name: "${APP_NAME}-worker"
      strategy: 
        type: Rolling
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "worker"
            app: "${APP_NAME}"
            name: "${APP_NAME}-worker"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-worker"
              imagePullPolicy: Always
              image: "astrolox/ubuntu-16-laravel-application:latest"
              args: ["application-worker"]
              env:
                -
                  name: DB_HOST
                  value: "${APP_NAME}-db"
                -
                  name: DB_DATABASE
                  value: "${APP_DB_DATABASE}"
                -
                  name: DB_USERNAME
                  value: "${APP_DB_USER}"
                -
                  name: DB_PASSWORD
                  value: "${APP_DB_PASSWORD}"
                -
                  name: WAIT_FOR_DB_MIGRATIONS
                  value: "prompt"
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
        - 
          type: ImageChange
          imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APP_NAME}-worker"
            from: 
              kind: ImageStreamTag
              name: "ubuntu-16-laravel-application:latest"
# Scheduler (CRON)
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels: 
        template: laravel-application
        component: "scheduler"
        app: "${APP_NAME}"
        name: "${APP_NAME}-cron"
      name: "${APP_NAME}-cron"
    spec: 
      replicas: 1
      selector: 
        name: "${APP_NAME}-cron"
      strategy: 
        type: Rolling
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "scheduler"
            app: "${APP_NAME}"
            name: "${APP_NAME}-cron"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-cron"
              imagePullPolicy: Always
              image: "astrolox/ubuntu-16-laravel-application:latest"
              args: ["application-cron"]
              env:
                -
                  name: DB_HOST
                  value: "${APP_NAME}-db"
                -
                  name: DB_DATABASE
                  value: "${APP_DB_DATABASE}"
                -
                  name: DB_USERNAME
                  value: "${APP_DB_USER}"
                -
                  name: DB_PASSWORD
                  value: "${APP_DB_PASSWORD}"
                -
                  name: WAIT_FOR_DB_MIGRATIONS
                  value: "prompt"
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
        - 
          type: ImageChange
          imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APP_NAME}-cron"
            from: 
              kind: ImageStreamTag
              name: "ubuntu-16-laravel-application:latest"
# Web (WEB)
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels: 
        template: laravel-application
        component: "web"
        app: "${APP_NAME}"
        name: "${APP_NAME}-web"
      name: "${APP_NAME}-web"
    spec: 
      replicas: 2
      selector: 
        name: "${APP_NAME}-web"
      strategy: 
        type: Rolling
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "web"
            app: "${APP_NAME}"
            name: "${APP_NAME}-web"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-web"
              imagePullPolicy: Always
              image: "astrolox/ubuntu-16-laravel-application:latest"
              args: ["application-web"]
              ports: 
                - 
                  name: "http"
                  containerPort: 8080
                  protocol: TCP
                - 
                  name: "https"
                  containerPort: 8443
                  protocol: TCP
              env:
                -
                  name: DB_HOST
                  value: "${APP_NAME}-db"
                -
                  name: DB_DATABASE
                  value: "${APP_DB_DATABASE}"
                -
                  name: DB_USERNAME
                  value: "${APP_DB_USER}"
                -
                  name: DB_PASSWORD
                  value: "${APP_DB_PASSWORD}"
                -
                  name: WAIT_FOR_DB_MIGRATIONS
                  value: "prompt"
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
        - 
          type: ImageChange
          imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APP_NAME}-web"
            from: 
              kind: ImageStreamTag
              name: "ubuntu-16-laravel-application:latest"
  - 
    apiVersion: v1
    kind: Service
    metadata: 
      labels: 
        template: laravel-application
        component: "web"
        app: "${APP_NAME}"
        name: "${APP_NAME}-web"
      name: "${APP_NAME}-web"
    spec: 
      ports: 
        - 
          name: "http"
          port: 8080
          targetPort: "http"
          protocol: TCP
        - 
          name: "https"
          port: 8443
          targetPort: "https"
          protocol: TCP
      selector: 
        name: "${APP_NAME}-web"
  - 
    apiVersion: v1
    kind: Route
    metadata: 
      labels: 
        template: laravel-application
        component: "web"
        app: "${APP_NAME}"
        name: "${APP_NAME}-web"
      name: "${APP_NAME}-web"
    spec: 
      host: "${APP_NAME}-web${APP_HOSTNAME_SUFFIX}"
      to: 
        kind: Service
        name: "${APP_NAME}-web"
      tls:
        termination: passthrough
      port:
        targetPort: "https"
# Migrator (MG)
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels: 
        template: laravel-application
        component: "migrator"
        app: "${APP_NAME}"
        name: "${APP_NAME}-mg"
      name: "${APP_NAME}-mg"
    spec: 
      replicas: 1
      selector: 
        name: "${APP_NAME}-mg"
      strategy: 
        type: Recreate
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "migrator"
            app: "${APP_NAME}"
            name: "${APP_NAME}-mg"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-mg"
              imagePullPolicy: Always
              image: "astrolox/ubuntu-16-laravel-application:latest"
              args: ["application-migrate"]
              env:
                -
                  name: DB_HOST
                  value: "${APP_NAME}-db"
                -
                  name: DB_DATABASE
                  value: "${APP_DB_DATABASE}"
                -
                  name: DB_USERNAME
                  value: "${APP_DB_USER}"
                -
                  name: DB_PASSWORD
                  value: "${APP_DB_PASSWORD}"
                -
                  name: WAIT_FOR_DB_MIGRATIONS
                  value: "false"
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
        - 
          type: ImageChange
          imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APP_NAME}-mg"
            from: 
              kind: ImageStreamTag
              name: "ubuntu-16-laravel-application:latest"
# Database (DB)
  - 
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-db"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - 
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-db-tmp"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels: 
        template: laravel-application
        component: "database"
        app: "${APP_NAME}"
        name: "${APP_NAME}-db"
      name: "${APP_NAME}-db"
    spec: 
      replicas: 1
      selector: 
        name: "${APP_NAME}-db"
      strategy: 
        type: Recreate
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "database"
            app: "${APP_NAME}"
            name: "${APP_NAME}-db"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-db"
              imagePullPolicy: Always
              image: "mysql:5.6"
              ports: 
                - 
                  name: "mysql"
                  containerPort: 3306
                  protocol: TCP
              readinessProbe: 
                exec: 
                  command: 
                    - /bin/sh
                    - "-i"
                    - "-c"
                    - "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                initialDelaySeconds: 5
                timeoutSeconds: 1
              env: 
                - 
                  name: MYSQL_USER
                  value: "${APP_DB_USER}"
                - 
                  name: MYSQL_PASSWORD
                  value: "${APP_DB_PASSWORD}"
                - 
                  name: MYSQL_DATABASE
                  value: "${APP_DB_DATABASE}"
                - 
                  name: MYSQL_ROOT_PASSWORD
                  value: "${APP_DB_ROOT_PASSWORD}"
              volumeMounts:
                - 
                  mountPath: /var/lib/mysql
                  name: "${APP_NAME}-db"
                - 
                  mountPath: /tmp
                  name: "${APP_NAME}-db-tmp"
          volumes:
            -
              name: "${APP_NAME}-db"
              persistentVolumeClaim:
                claimName: "${APP_NAME}-db"
            - 
              name: "${APP_NAME}-db-tmp"
              emptyDir: ~
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
  - 
    apiVersion: v1
    kind: Service
    metadata: 
      labels: 
        template: laravel-application
        component: "database"
        app: "${APP_NAME}"
        name: "${APP_NAME}-db"
      name: "${APP_NAME}-db"
    spec: 
      ports: 
        - 
          name: "mysql"
          port: 3306
          targetPort: "mysql"
          protocol: TCP
      selector: 
        name: "${APP_NAME}-db"
# Message Queue (MQ) - Rabbit MQ
  - 
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-mq-data"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - 
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-mq-config"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - 
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels: 
        template: laravel-application
        component: "message-queue"
        app: "${APP_NAME}"
        name: "${APP_NAME}-mq"
      name: "${APP_NAME}-mq"
    spec: 
      replicas: 1
      selector: 
        name: "${APP_NAME}-mq"
      strategy: 
        type: Rolling
      template: 
        metadata: 
          labels: 
            template: laravel-application
            component: "message-queue"
            app: "${APP_NAME}"
            name: "${APP_NAME}-mq"
        spec: 
          containers: 
            - 
              name: "${APP_NAME}-mq"
              imagePullPolicy: Always
              image: "rabbitmq:3-management"
              ports: 
                - 
                  name: "amqps"
                  containerPort: 5671
                  protocol: TCP
                - 
                  name: "amqp"
                  containerPort: 5672
                  protocol: TCP
                - 
                  name: "https"
                  containerPort: 15671
                  protocol: TCP
                - 
                  name: "http"
                  containerPort: 15672
                  protocol: TCP
              env:
                - 
                  name: RABBITMQ_DEFAULT_USER
                  value: "${APP_MQ_USER}"
                - 
                  name: RABBITMQ_DEFAULT_PASS
                  value: "${APP_MQ_PASSWORD}"
              volumeMounts:
                - 
                  mountPath: /var/lib/rabbitmq
                  name: "${APP_NAME}-mq-data"
                - 
                  mountPath: /etc/rabbitmq
                  name: "${APP_NAME}-mq-config"
          volumes:
            -
              name: "${APP_NAME}-mq-data"
              persistentVolumeClaim:
                claimName: "${APP_NAME}-mq-data"
            -
              name: "${APP_NAME}-mq-config"
              persistentVolumeClaim:
                claimName: "${APP_NAME}-mq-config"
          restartPolicy: Always
          securityContext: 
            runAsUser: 10999
      triggers: 
        - 
          type: ConfigChange
  - 
    apiVersion: v1
    kind: Service
    metadata: 
      labels: 
        template: laravel-application
        component: "message-queue"
        app: "${APP_NAME}"
        name: "${APP_NAME}-mq"
      name: "${APP_NAME}-mq"
    spec: 
      ports: 
        - 
          name: "amqps"
          port: 5671
          targetPort: "amqps"
          protocol: TCP 
        - 
          name: "amqp"
          port: 5672
          targetPort: "amqp"
          protocol: TCP
        - 
          name: "https"
          port: 15671
          targetPort: "https"
          protocol: TCP
        - 
          name: "http"
          port: 15672
          targetPort: "http"
          protocol: TCP
      selector: 
        name: "${APP_NAME}-mq"
  - 
    apiVersion: v1
    kind: Route
    metadata: 
      labels: 
        template: laravel-application
        component: "message-queue"
        app: "${APP_NAME}"
        name: "${APP_NAME}-mq"
      name: "${APP_NAME}-mq"
    spec: 
      host: "${APP_NAME}-mq${APP_HOSTNAME_SUFFIX}"
      to: 
        kind: Service
        name: "${APP_NAME}-mq"
      tls:
        termination: passthrough
      port:
        targetPort: "https"
parameters: 
# Change these immediately ...
  - 
    description: "Name of this Laravel application (maximum 17 characters)"
    from: "mylaravelapp-[0-9]{5}"
    generate: expression
    name: APP_NAME
    required: true
  - 
    description: "Database database name"
    name: APP_DB_DATABASE
    required: true
    value: application
  - 
    description: "HTTPS hostname suffix for the routes"
    name: APP_HOSTNAME_SUFFIX
    required: true
    value: .changeme.example.com
# Will probably need to change these after deployment ...
  - 
    name: CELERY_BROKER_URL
    required: true
    value: amqp://guest:guest@rabbitmq:5672//
  - 
    name: CELERY_BROKER_API
    required: true
    value: http://guest:guest@rabbitmq:15672/api/
# No need to change any of these ...
  - 
    description: "Database user"
    from: "user[0-9]{3}"
    generate: expression
    name: APP_DB_USER
    required: true
  - 
    description: "Database password"
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: APP_DB_PASSWORD
    required: true
  - 
    description: "Database root password"
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: APP_DB_ROOT_PASSWORD
    required: true
  - 
    description: "Message Queue user"
    from: "user[0-9]{3}"
    generate: expression
    name: APP_MQ_USER
    required: true
  - 
    description: "Message Queue password"
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: APP_MQ_PASSWORD
    required: true
